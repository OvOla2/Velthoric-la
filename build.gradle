plugins {
    id 'dev.architectury.loom' version '1.10-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.gradleup.shadow' version '8.3.6' apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {

        mavenCentral()
        maven { url = 'https://maven.maxhenkel.de/repository/public'}
        maven { url = 'https://api.modrinth.com/maven'}
        maven { url = 'https://cursemaven.com'}
        maven { url = 'https://maven.kosmx.dev' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.essential.gg/repository/maven-public'}
        maven { url = 'https://jitpack.io' }
        maven { url = 'https://s01.oss.sonatype.org/content/repositories/snapshots'}
        maven { url = 'https://downhill.ddns.net/maven'}
        maven { url = 'https://jitpack.io'}

        maven { url = 'https://maven.su5ed.dev/releases'}

        maven { url = 'https://maven.deftu.dev/snapshots'}
        maven { url = 'https://maven.deftu.dev/releases'}

        maven { url = 'https://maven.saps.dev/minecraft'}

        maven { url = 'https://maven.izzel.io/releases'}

        maven {
            name = 'GeckoLib'
            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
            content {
                includeGroupByRegex("software\\.bernie.*")
                includeGroup("com.eliotlash.mclib")
            }
        }

        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"

        mappings loom.layered {
            officialMojangMappings()

            parchment("org.parchmentmc.data:parchment-1.20.2:2023.10.08@zip")
        }

        //implementation("com.github.stephengold:jolt-jni-Linux64:2.1.0")
        //implementation("com.github.stephengold:jolt-jni-Windows64:2.1.0:DebugDp")
        //implementation("com.github.stephengold:jolt-jni-Linux64:2.1.0:DebugDp")
        //implementation("com.github.stephengold:jolt-jni-Linux_ARM64:2.1.0:DebugDp")
        //implementation("com.github.stephengold:jolt-jni-MacOSX64:2.1.0:DebugDp")
        //implementation("com.github.stephengold:jolt-jni-MacOSX_ARM64:2.1.0:DebugDp")

        //include("com.github.stephengold:jolt-jni-Linux64:2.1.0")
        //include("com.github.stephengold:jolt-jni-Windows64:2.1.0:DebugDp")
        //include("com.github.stephengold:jolt-jni-Linux64:2.1.0:DebugDp")
        //include("com.github.stephengold:jolt-jni-Linux_ARM64:2.1.0:DebugDp")
        //include("com.github.stephengold:jolt-jni-MacOSX64:2.1.0:DebugDp")
        //include("com.github.stephengold:jolt-jni-MacOSX_ARM64:2.1.0:DebugDp")

        implementation("io.github.electrostat-lab:snaploader:1.1.1-stable")
        minecraftRuntimeLibraries("io.github.electrostat-lab:snaploader:1.1.1-stable")
        include("io.github.electrostat-lab:snaploader:1.1.1-stable")


        implementation files("${rootDir}/libraries/jolt-jni-2.1.1-SNAPSHOT.jar")
        implementation files("${rootDir}/libraries/jolt-jni-2.1.1-SNAPSHOT-DebugDp.jar")

        minecraftRuntimeLibraries files("${rootDir}/libraries/jolt-jni-2.1.1-SNAPSHOT.jar")
        minecraftRuntimeLibraries files("${rootDir}/libraries/jolt-jni-2.1.1-SNAPSHOT-DebugDp.jar")

        include files("${rootDir}/libraries/jolt-jni-2.1.1-SNAPSHOT.jar")
        include files("${rootDir}/libraries/jolt-jni-2.1.1-SNAPSHOT-DebugDp.jar")

    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        repositories {

        }
    }
}

task generateJoltDoc {
    group = 'Documentation'
    description = 'Erstellt eine Dokumentation aller Methoden aus der jolt-jni.jar.'

    def inputJar = file("C:/Users/milan/.gradle/caches/modules-2/files-2.1/com.github.stephengold/jolt-jni-Windows64/2.1.0/36b0cbf834222077132d6d0d2a81f5e47c477ed4/jolt-jni-Windows64-2.1.0.jar")

    def outputFile = file("$buildDir/docs/jolt.txt")

    inputs.file(inputJar)
    outputs.file(outputFile)

    doLast {

        if (!inputJar.exists()) {
            throw new FileNotFoundException("Input-JAR nicht gefunden: ${inputJar.absolutePath}")
        }

        outputFile.parentFile.mkdirs()
        outputFile.text = ''

        println "Analysiere JAR: ${inputJar.name}"
        println "Schreibe Ausgabe nach: ${outputFile.absolutePath}"

        def zipFile = new java.util.zip.ZipFile(inputJar)
        def classEntries = zipFile.entries().findAll { entry ->
            !entry.isDirectory() && entry.name.endsWith('.class')
        }

        classEntries.each { entry ->

            def className = entry.name.replace('/', '.').replaceAll('\\.class$', '')

            def commandOutput = new ByteArrayOutputStream()

            project.exec {
                executable = 'javap'
                args '-p', '-classpath', inputJar.absolutePath, className
                standardOutput = commandOutput
                ignoreExitValue = true
            }

            outputFile.append("${className.substring(className.lastIndexOf('.') + 1)}.class:\n")

            def javapResult = commandOutput.toString()
            javapResult.lines()

                    .findAll { it.contains('(') && it.contains(')') && !it.contains('{') && !it.contains('Compiled from') }
                    .each { line ->

                        String cleanedLine = line.trim()
                                .replaceAll('public |private |protected |static |final |synchronized |native ', '')
                        outputFile.append("  ${cleanedLine}\n")
                    }

            outputFile.append("\n")
        }

        zipFile.close()
        println "Dokumentation erfolgreich erstellt!"
    }
}