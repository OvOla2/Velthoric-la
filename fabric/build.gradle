plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        server {
            runDir "run-server"
        }
        client {
            runDir "run-client"
            programArgs '--username', 'dev'
            //vmArg "-Dfabric.log.level=debug"
        }
    }

    accessWidenerPath = project(":common").loom.accessWidenerPath
}


configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.4.1")))

    modImplementation "curse.maven:lithium-360438:6097158"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    modImplementation "curse.maven:sodium-394468:6260639"
    modImplementation "curse.maven:modmenu-308702:5162837"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    implementation project(path: ":vx-native", configuration: "namedElements")
    shadowBundle project(path: ":vx-native", configuration: "namedElements")

    shadowBundle("com.github.stephengold:jolt-jni-Linux64:${jolt_jni_version}")
    shadowBundle("com.github.stephengold:jolt-jni-Windows64:${jolt_jni_version}:ReleaseSp")
    shadowBundle("com.github.stephengold:jolt-jni-Linux64:${jolt_jni_version}:ReleaseSp")
    shadowBundle("com.github.stephengold:jolt-jni-Linux_ARM64:${jolt_jni_version}:ReleaseSp")
    shadowBundle("com.github.stephengold:jolt-jni-MacOSX64:${jolt_jni_version}:ReleaseSp")
    shadowBundle("com.github.stephengold:jolt-jni-MacOSX_ARM64:${jolt_jni_version}:ReleaseSp")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    def propertiesToExpand = [
            minecraft_version: rootProject.minecraft_version,
            mod_id: rootProject.mod_id,
            mod_name: rootProject.mod_name,
            mod_license: rootProject.mod_license,
            mod_version: rootProject.mod_version,
            mod_authors: rootProject.mod_authors,
            mod_description: rootProject.mod_description,
            minecraft_version_range: rootProject.minecraft_version_range,
            forge_version: rootProject.forge_version,
            forge_version_range: rootProject.forge_version_range,
            loader_version_range: rootProject.loader_version_range,

            fabric_loader_version: rootProject.fabric_loader_version,
            fabric_api_version: rootProject.fabric_api_version,
            architectury_api_version: rootProject.architectury_api_version
    ]

    inputs.properties propertiesToExpand

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
        expand propertiesToExpand + [project: project]
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}